import {
  View,
  FlatList,
  StyleSheet,
  TouchableOpacity,
  Platform,
  StatusBar,
  Image,
} from 'react-native';
import React, {
  FC,
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import CustomView from '../../components/global/CustomView';
import { useRoute } from '@react-navigation/native';
import { useAppDispatch } from '../../redux/reduxHook';
import { screenHeight, screenWidth } from '../../utils/Scaling';
import { debounce } from 'lodash';
import { fetchReelsGroupedByHashtags } from '../../redux/actions/reelAction';
import { ActivityIndicator } from 'react-native';
import { Colors } from '../../constants/Colors';
import Loader from '../../assets/images/loader.jpg';
import { goBack } from '../../utils/NavigationUtil';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { RFValue } from 'react-native-responsive-fontsize';
import VideoItem from '../../components/reel/VideoItem';
import { ViewToken } from 'react-native';
import { navigate } from '../../utils/NavigationUtil';


interface RouteProp {
  data: any[];
}

const FeedReelScrollScreen: FC = () => {
  const route = useRoute();
  const dispatch = useAppDispatch();

  const routeParams = route?.params as RouteProp;

  const [loading, setLoading] = useState(false);
  const [offset, setOffset] = useState(0);
  const [data, setData] = useState<any[]>([]);
  const [hasMore, setHasMore] = useState(true);
  const [currentVisibleIndex, setCurrentVisibleIndex] = useState<number>(0);

  const viewabilityConfig = useRef({
    itemVisiblePercentThreshold: 80,
  }).current;

  const onViewableItemsChanged = useRef(
    debounce(({ viewableItems }: { viewableItems: Array<ViewToken> }) => {
      if (viewableItems.length > 0) {
        setCurrentVisibleIndex(viewableItems[0].index || 0);
      }
    }, 100)
  ).current;

  const getItemLayout = useCallback(
    (data: any, index: number) => ({
      length: screenHeight,
      offset: screenHeight * index,
      index,
    }),
    []
  );

  const processGroupedReels = (groupedReels: any[]) => {
    console.log('Processing Grouped Reels:', groupedReels);
    const processedData: any[] = [];
    groupedReels.forEach((group) => {
      group.videos.forEach((video: string, index: number) => {
        processedData.push({
          hashtag: group.hashtag,
          videoUri: video,
          thumbnailUri: group.thumbnails[index] || group.thumbnails[0],
          caption: group.captions[index] || group.captions[0],
        });
      });
    });
    console.log('Processed Data:', processedData);
    return processedData;
  };

  const removeDuplicates = (data: any) => {
    const uniqueDataMap = new Map();
    data?.forEach((item: any) => {
      if (!uniqueDataMap.has(item._id)) {
        uniqueDataMap.set(item._id, item);
      }
    });
    return Array.from(uniqueDataMap.values());
  };

  const fetchFeed = useCallback(
    async (offset: number) => {
      if (loading || !hasMore) return;
      console.log('Fetching reels with offset:', offset);
      setLoading(true);
      try {
        const response = await dispatch(fetchReelsGroupedByHashtags(offset, 10));
        console.log('Response from fetchReelsGroupedByHashtags:', response);
  
        const groupedReels = response?.groupedReels || [];
        console.log('Grouped Reels:', groupedReels);
  
        const processedData = processGroupedReels(groupedReels);
        console.log('Processed Data:', processedData);
  
        setData((prevData) => [...prevData, ...processedData]);
        setOffset(offset + 10);
  
        if (groupedReels.length < 10) {
          setHasMore(false);
        }
      } catch (error) {
        console.error('Error fetching reels:', error);
      } finally {
        setLoading(false);
      }
    },
    [loading, hasMore, dispatch]
  );

  useEffect(() => {
    // Initialize data from route params or fetch the first batch
    if (routeParams?.data) {
      setData(processGroupedReels(routeParams.data));
    } else {
      fetchFeed(offset);
    }
  }, [routeParams?.data]);

  const renderVideoItem = useCallback(
    ({ item, index }: { item: any; index: number }) => (
      <VideoItem
        key={index}
        item={item}
        isVisible={index === currentVisibleIndex}
        preload={Math.abs(currentVisibleIndex - index) <= 2}
      />
    ),
    [currentVisibleIndex]
  );


  const keyExtractor = useCallback((item: any) => item._id.toString(), []);

  const memoizedValue = useMemo(
    () => renderVideoItem,
    [currentVisibleIndex, data]
  );

  return (
    <CustomView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="black" translucent={true} />

      <FlatList
        data={data || []}
        keyExtractor={keyExtractor}
        renderItem={memoizedValue}
        windowSize={2}
        onEndReached={async () => {
          console.log('Fetching more reels...');
          await fetchFeed(offset);
        }}
        pagingEnabled
        viewabilityConfig={viewabilityConfig}
        disableIntervalMomentum={true}
        removeClippedSubviews
        maxToRenderPerBatch={2}
        getItemLayout={getItemLayout}
        onViewableItemsChanged={onViewableItemsChanged}
        initialNumToRender={1}
        onEndReachedThreshold={0.1}
        ListFooterComponent={() =>
          loading ? (
            <View style={styles.footer}>
              <ActivityIndicator size="small" color={Colors.white} />
            </View>
          ) : null
        }
        decelerationRate={'normal'}
        showsVerticalScrollIndicator={false}
        scrollEventThrottle={16}
      />

      <Image source={Loader} style={styles.thumbnail} />

      <View style={styles.backButton}>
        <TouchableOpacity onPress={() => goBack()}>
          <Icon name="arrow-back" color="white" size={RFValue(20)} />
        </TouchableOpacity>
      </View>
    </CustomView>
  );
};

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    marginTop: Platform.OS === 'ios' ? 0 : StatusBar.currentHeight,
    backgroundColor: Colors.black, // To give the full screen a consistent background
  },
  videoContainer: {
    flex: 1,
    width: screenWidth,
    height: screenHeight,
  },
  backButton: {
    position: 'absolute',
    top: Platform.OS === 'ios' ? 70 : 40, // Adjust for better positioning
    left: 10,
    zIndex: 99,
  },
  footer: {
    height: 80,
    alignItems: 'center',
    justifyContent: 'center',
  },
  thumbnail: {
    position: 'absolute',
    zIndex: -2,
    height: screenHeight,
    width: screenWidth,
    alignSelf: 'center',
    resizeMode: 'cover',
    top: 0,
    
  },
  videoItem: {
    width: '100%',
    height: '100%', // Ensure the video fills the available height
    backgroundColor: Colors.black, // Provide a background for the video
  },
});

export default FeedReelScrollScreen;